package test.model;

import java.util.ArrayList;
import java.util.List;

public class OrderExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    public OrderExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIDIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIDIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIDEqualTo(Integer value) {
            addCriterion("ID =", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDNotEqualTo(Integer value) {
            addCriterion("ID <>", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDGreaterThan(Integer value) {
            addCriterion("ID >", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDGreaterThanOrEqualTo(Integer value) {
            addCriterion("ID >=", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDLessThan(Integer value) {
            addCriterion("ID <", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDLessThanOrEqualTo(Integer value) {
            addCriterion("ID <=", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDIn(List<Integer> values) {
            addCriterion("ID in", values, "ID");
            return (Criteria) this;
        }

        public Criteria andIDNotIn(List<Integer> values) {
            addCriterion("ID not in", values, "ID");
            return (Criteria) this;
        }

        public Criteria andIDBetween(Integer value1, Integer value2) {
            addCriterion("ID between", value1, value2, "ID");
            return (Criteria) this;
        }

        public Criteria andIDNotBetween(Integer value1, Integer value2) {
            addCriterion("ID not between", value1, value2, "ID");
            return (Criteria) this;
        }

        public Criteria andCOUNTIsNull() {
            addCriterion("COUNT is null");
            return (Criteria) this;
        }

        public Criteria andCOUNTIsNotNull() {
            addCriterion("COUNT is not null");
            return (Criteria) this;
        }

        public Criteria andCOUNTEqualTo(Integer value) {
            addCriterion("COUNT =", value, "COUNT");
            return (Criteria) this;
        }

        public Criteria andCOUNTNotEqualTo(Integer value) {
            addCriterion("COUNT <>", value, "COUNT");
            return (Criteria) this;
        }

        public Criteria andCOUNTGreaterThan(Integer value) {
            addCriterion("COUNT >", value, "COUNT");
            return (Criteria) this;
        }

        public Criteria andCOUNTGreaterThanOrEqualTo(Integer value) {
            addCriterion("COUNT >=", value, "COUNT");
            return (Criteria) this;
        }

        public Criteria andCOUNTLessThan(Integer value) {
            addCriterion("COUNT <", value, "COUNT");
            return (Criteria) this;
        }

        public Criteria andCOUNTLessThanOrEqualTo(Integer value) {
            addCriterion("COUNT <=", value, "COUNT");
            return (Criteria) this;
        }

        public Criteria andCOUNTIn(List<Integer> values) {
            addCriterion("COUNT in", values, "COUNT");
            return (Criteria) this;
        }

        public Criteria andCOUNTNotIn(List<Integer> values) {
            addCriterion("COUNT not in", values, "COUNT");
            return (Criteria) this;
        }

        public Criteria andCOUNTBetween(Integer value1, Integer value2) {
            addCriterion("COUNT between", value1, value2, "COUNT");
            return (Criteria) this;
        }

        public Criteria andCOUNTNotBetween(Integer value1, Integer value2) {
            addCriterion("COUNT not between", value1, value2, "COUNT");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTIsNull() {
            addCriterion("DISCOUNT is null");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTIsNotNull() {
            addCriterion("DISCOUNT is not null");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTEqualTo(Double value) {
            addCriterion("DISCOUNT =", value, "DISCOUNT");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTNotEqualTo(Double value) {
            addCriterion("DISCOUNT <>", value, "DISCOUNT");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTGreaterThan(Double value) {
            addCriterion("DISCOUNT >", value, "DISCOUNT");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTGreaterThanOrEqualTo(Double value) {
            addCriterion("DISCOUNT >=", value, "DISCOUNT");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTLessThan(Double value) {
            addCriterion("DISCOUNT <", value, "DISCOUNT");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTLessThanOrEqualTo(Double value) {
            addCriterion("DISCOUNT <=", value, "DISCOUNT");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTIn(List<Double> values) {
            addCriterion("DISCOUNT in", values, "DISCOUNT");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTNotIn(List<Double> values) {
            addCriterion("DISCOUNT not in", values, "DISCOUNT");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTBetween(Double value1, Double value2) {
            addCriterion("DISCOUNT between", value1, value2, "DISCOUNT");
            return (Criteria) this;
        }

        public Criteria andDISCOUNTNotBetween(Double value1, Double value2) {
            addCriterion("DISCOUNT not between", value1, value2, "DISCOUNT");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTIsNull() {
            addCriterion("HAS_SENT is null");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTIsNotNull() {
            addCriterion("HAS_SENT is not null");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTEqualTo(Byte value) {
            addCriterion("HAS_SENT =", value, "HAS_SENT");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTNotEqualTo(Byte value) {
            addCriterion("HAS_SENT <>", value, "HAS_SENT");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTGreaterThan(Byte value) {
            addCriterion("HAS_SENT >", value, "HAS_SENT");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTGreaterThanOrEqualTo(Byte value) {
            addCriterion("HAS_SENT >=", value, "HAS_SENT");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTLessThan(Byte value) {
            addCriterion("HAS_SENT <", value, "HAS_SENT");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTLessThanOrEqualTo(Byte value) {
            addCriterion("HAS_SENT <=", value, "HAS_SENT");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTIn(List<Byte> values) {
            addCriterion("HAS_SENT in", values, "HAS_SENT");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTNotIn(List<Byte> values) {
            addCriterion("HAS_SENT not in", values, "HAS_SENT");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTBetween(Byte value1, Byte value2) {
            addCriterion("HAS_SENT between", value1, value2, "HAS_SENT");
            return (Criteria) this;
        }

        public Criteria andHAS_SENTNotBetween(Byte value1, Byte value2) {
            addCriterion("HAS_SENT not between", value1, value2, "HAS_SENT");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDIsNull() {
            addCriterion("CUSTOMER_ID is null");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDIsNotNull() {
            addCriterion("CUSTOMER_ID is not null");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDEqualTo(Integer value) {
            addCriterion("CUSTOMER_ID =", value, "CUSTOMER_ID");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDNotEqualTo(Integer value) {
            addCriterion("CUSTOMER_ID <>", value, "CUSTOMER_ID");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDGreaterThan(Integer value) {
            addCriterion("CUSTOMER_ID >", value, "CUSTOMER_ID");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDGreaterThanOrEqualTo(Integer value) {
            addCriterion("CUSTOMER_ID >=", value, "CUSTOMER_ID");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDLessThan(Integer value) {
            addCriterion("CUSTOMER_ID <", value, "CUSTOMER_ID");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDLessThanOrEqualTo(Integer value) {
            addCriterion("CUSTOMER_ID <=", value, "CUSTOMER_ID");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDIn(List<Integer> values) {
            addCriterion("CUSTOMER_ID in", values, "CUSTOMER_ID");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDNotIn(List<Integer> values) {
            addCriterion("CUSTOMER_ID not in", values, "CUSTOMER_ID");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDBetween(Integer value1, Integer value2) {
            addCriterion("CUSTOMER_ID between", value1, value2, "CUSTOMER_ID");
            return (Criteria) this;
        }

        public Criteria andCUSTOMER_IDNotBetween(Integer value1, Integer value2) {
            addCriterion("CUSTOMER_ID not between", value1, value2, "CUSTOMER_ID");
            return (Criteria) this;
        }

        public Criteria andBILL_IDIsNull() {
            addCriterion("BILL_ID is null");
            return (Criteria) this;
        }

        public Criteria andBILL_IDIsNotNull() {
            addCriterion("BILL_ID is not null");
            return (Criteria) this;
        }

        public Criteria andBILL_IDEqualTo(Integer value) {
            addCriterion("BILL_ID =", value, "BILL_ID");
            return (Criteria) this;
        }

        public Criteria andBILL_IDNotEqualTo(Integer value) {
            addCriterion("BILL_ID <>", value, "BILL_ID");
            return (Criteria) this;
        }

        public Criteria andBILL_IDGreaterThan(Integer value) {
            addCriterion("BILL_ID >", value, "BILL_ID");
            return (Criteria) this;
        }

        public Criteria andBILL_IDGreaterThanOrEqualTo(Integer value) {
            addCriterion("BILL_ID >=", value, "BILL_ID");
            return (Criteria) this;
        }

        public Criteria andBILL_IDLessThan(Integer value) {
            addCriterion("BILL_ID <", value, "BILL_ID");
            return (Criteria) this;
        }

        public Criteria andBILL_IDLessThanOrEqualTo(Integer value) {
            addCriterion("BILL_ID <=", value, "BILL_ID");
            return (Criteria) this;
        }

        public Criteria andBILL_IDIn(List<Integer> values) {
            addCriterion("BILL_ID in", values, "BILL_ID");
            return (Criteria) this;
        }

        public Criteria andBILL_IDNotIn(List<Integer> values) {
            addCriterion("BILL_ID not in", values, "BILL_ID");
            return (Criteria) this;
        }

        public Criteria andBILL_IDBetween(Integer value1, Integer value2) {
            addCriterion("BILL_ID between", value1, value2, "BILL_ID");
            return (Criteria) this;
        }

        public Criteria andBILL_IDNotBetween(Integer value1, Integer value2) {
            addCriterion("BILL_ID not between", value1, value2, "BILL_ID");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table ORDERS
     *
     * @mbggenerated do_not_delete_during_merge Sat Dec 07 00:31:06 HKT 2013
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table ORDERS
     *
     * @mbggenerated Sat Dec 07 00:31:06 HKT 2013
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}